// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: learn.proto

package learn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HelloApp_GetUser_FullMethodName          = "/HelloApp/GetUser"
	HelloApp_GetUsers_FullMethodName         = "/HelloApp/GetUsers"
	HelloApp_GetUsersNoStream_FullMethodName = "/HelloApp/GetUsersNoStream"
)

// HelloAppClient is the client API for HelloApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloAppClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[User], error)
	GetUsersNoStream(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetUsersRsponse, error)
}

type helloAppClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloAppClient(cc grpc.ClientConnInterface) HelloAppClient {
	return &helloAppClient{cc}
}

func (c *helloAppClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, HelloApp_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloAppClient) GetUsers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[User], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HelloApp_ServiceDesc.Streams[0], HelloApp_GetUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyMessage, User]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloApp_GetUsersClient = grpc.ServerStreamingClient[User]

func (c *helloAppClient) GetUsersNoStream(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetUsersRsponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersRsponse)
	err := c.cc.Invoke(ctx, HelloApp_GetUsersNoStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloAppServer is the server API for HelloApp service.
// All implementations must embed UnimplementedHelloAppServer
// for forward compatibility.
type HelloAppServer interface {
	GetUser(context.Context, *UserRequest) (*User, error)
	GetUsers(*EmptyMessage, grpc.ServerStreamingServer[User]) error
	GetUsersNoStream(context.Context, *EmptyMessage) (*GetUsersRsponse, error)
	mustEmbedUnimplementedHelloAppServer()
}

// UnimplementedHelloAppServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHelloAppServer struct{}

func (UnimplementedHelloAppServer) GetUser(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedHelloAppServer) GetUsers(*EmptyMessage, grpc.ServerStreamingServer[User]) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedHelloAppServer) GetUsersNoStream(context.Context, *EmptyMessage) (*GetUsersRsponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersNoStream not implemented")
}
func (UnimplementedHelloAppServer) mustEmbedUnimplementedHelloAppServer() {}
func (UnimplementedHelloAppServer) testEmbeddedByValue()                  {}

// UnsafeHelloAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloAppServer will
// result in compilation errors.
type UnsafeHelloAppServer interface {
	mustEmbedUnimplementedHelloAppServer()
}

func RegisterHelloAppServer(s grpc.ServiceRegistrar, srv HelloAppServer) {
	// If the following call pancis, it indicates UnimplementedHelloAppServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HelloApp_ServiceDesc, srv)
}

func _HelloApp_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloAppServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloApp_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloAppServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloApp_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloAppServer).GetUsers(m, &grpc.GenericServerStream[EmptyMessage, User]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HelloApp_GetUsersServer = grpc.ServerStreamingServer[User]

func _HelloApp_GetUsersNoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloAppServer).GetUsersNoStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloApp_GetUsersNoStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloAppServer).GetUsersNoStream(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloApp_ServiceDesc is the grpc.ServiceDesc for HelloApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HelloApp",
	HandlerType: (*HelloAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _HelloApp_GetUser_Handler,
		},
		{
			MethodName: "GetUsersNoStream",
			Handler:    _HelloApp_GetUsersNoStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _HelloApp_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "learn.proto",
}
